---
// Import the necessary dependencies
import { Image } from "astro:assets";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import ReviewComponent from "@components/ui/blocks/ReviewComponent.astro";

// Define props from Astro
const {
  title,
  subTitle,
  primaryBtn,
  primaryBtnURL,
  secondaryBtn,
  secondaryBtnURL,
  withReview,
  avatars,
  starCount,
  rating,
  reviews,
  src,
  alt
} = Astro.props;

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  withReview?: boolean;
  avatars?: Array<string>;
  starCount?: number;
  rating?: string;
  reviews?: string;
  src?: any;
  alt?: string;
}
---

<!-- Defining a grid container that holds all the content -->
<section
  class="relative mx-auto grid max-w-7xl gap-8 px-4 py-20 sm:px-6 md:grid-cols-2 md:items-center md:gap-12 lg:px-8 lg:py-28 2xl:max-w-full overflow-hidden"
>
  <!-- Background gradient -->
  <div class="absolute inset-0 bg-gradient-to-br from-primary-50 via-white to-accent-50 dark:from-neutral-900 dark:via-neutral-900 dark:to-neutral-800 -z-10"></div>
  
  <!-- Title and description -->
  <div class="animate-on-scroll">
    <!-- Each h1 and p tag renders a portion of the title and subTitle defined above -->
    <h1
      class="block text-balance text-4xl font-bold tracking-tight text-neutral-900 dark:text-white sm:text-5xl lg:text-7xl lg:leading-tight"
    >
      <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
      <Fragment set:html={title} />
    </h1>
    {subTitle &&
    <p
      class="mt-6 text-pretty text-xl leading-relaxed text-neutral-600 dark:text-neutral-300 lg:w-4/5"
    >
      {subTitle}
    </p>
  }
    <!-- Action Button Section: This section includes two CTAs with their own styles and URL -->
    <div class="mt-10 flex flex-col gap-4 sm:flex-row sm:gap-6">
      {primaryBtn && 
      <a href={primaryBtnURL} class="btn-primary group">
        {primaryBtn}
        <svg class="w-5 h-5 transition-transform duration-200 group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </a>
      }
      {secondaryBtn && 
      <a href={secondaryBtnURL} class="btn-secondary group">
        {secondaryBtn}
        <svg class="w-5 h-5 transition-transform duration-200 group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </a>
      }
    </div>

    <!-- Review Section: This section presents avatars, review ratings and the number of reviews -->
    { withReview ? (
    <div class="mt-12">
      <ReviewComponent avatars={avatars} starCount={starCount} rating={rating} reviews={reviews} />
    </div>
    ) : "" }

  </div>
  <!-- Hero Image Section -->
  <div class="flex w-full animate-on-scroll">
      <div class="relative overflow-hidden rounded-3xl shadow-large">
	{src && alt &&
	<Image
        src={src}
        alt={alt}
        class="h-full w-full object-cover object-center transition-transform duration-700 hover:scale-105"
        draggable={"false"}
        loading={"eager"}
        format={"avif"}
	 />
	}
      <!-- Floating elements for visual interest -->
      <div class="absolute -top-4 -right-4 w-24 h-24 bg-primary-500/20 rounded-full blur-xl animate-float"></div>
      <div class="absolute -bottom-6 -left-6 w-32 h-32 bg-accent-500/20 rounded-full blur-xl animate-float" style="animation-delay: -3s;"></div>
    </div>
  </div>
  
  <!-- Scroll indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce md:hidden">
    <svg class="w-6 h-6 text-neutral-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
    </svg>
  </div>
</section>

<script>
  // Intersection Observer for scroll animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('in-view');
      }
    });
  }, observerOptions);

  document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('.animate-on-scroll');
    animatedElements.forEach(el => observer.observe(el));
  });
</script>
